from telebot import types
import information_data
import os
from shared_data import file_cache
from utils.keyboards import create_files_keyboard, get_page_text

def setup_other_files_handlers(bot):

    pagination_cache = {}

    def get_files_text(files):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤"""
        if not files:
            return "‚ùå –§–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\nüì§ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª!"
        elif len(files) == 1:
            return "–ù–∞–π–¥–µ–Ω 1 —Ñ–∞–π–ª:"
        else:
            return f"–ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤:"

    @bot.message_handler(commands=['allfiles'])
    def all_mes(message):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        keyboard = types.InlineKeyboardMarkup()

        keyboard.add(types.InlineKeyboardButton(
            text='üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã',
            callback_data='look_all_files'
        ))

        keyboard.add(types.InlineKeyboardButton(
            text='üîç –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É',
            callback_data='find_by_subject'
        ))

        keyboard.add(types.InlineKeyboardButton(
            text='üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª',
            callback_data='upload_file'
        ))

        bot.send_message(message.chat.id, information_data.all_files_text,
                         reply_markup=keyboard)


    @bot.callback_query_handler(func=lambda call: call.data == 'find_by_subject')
    def find_by_subject(call):
        """–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        keyboard = types.InlineKeyboardMarkup()

        for subject_key, subject_name in information_data.subjects_others.items():
            keyboard.add(types.InlineKeyboardButton(
                text=f"{subject_name}",
                callback_data=f"oth_subj_{subject_key}"
            ))

        keyboard.add(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_allfiles_menu"
        ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('oth_subj_'))
    def choose_file_type(call):
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞"""
        subject_key = call.data.split('_')[2]  # –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á –ø—Ä–µ–¥–º–µ—Ç–∞
        subject_name = information_data.subjects_others[subject_key]

        keyboard = types.InlineKeyboardMarkup()

        for type_key in information_data.in_others_key:
            type_path = os.path.join(information_data.file_path_others, subject_key, type_key)
            file_count = 0

            if os.path.exists(type_path):
                file_count = len([f for f in os.listdir(type_path)
                                  if os.path.isfile(os.path.join(type_path, f))])

            type_name = information_data.file_types_others[type_key]
            keyboard.add(types.InlineKeyboardButton(
                text=f"{type_name} ({file_count} —Ñ–∞–π–ª–æ–≤)",
                callback_data=f"oth_tp_{subject_key}_{type_key}"
            ))

        keyboard.add(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥–º–µ—Ç–∞–º",
            callback_data="find_by_subject"
        ))

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"üìö {subject_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∞–π–ª–æ–≤:",
            reply_markup=keyboard
        )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('oth_tp_'))
    def show_other_files(call):
        try:
            data = call.data.split('_')
            subject = data[2]
            type = data[3]
            page = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

            subject_name = information_data.subjects_others[subject]
            type_name = information_data.file_types_others[type]

            subject_type_path = os.path.join(information_data.file_path_others, subject, type)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            files = []
            if os.path.exists(subject_type_path):
                files = [f for f in os.listdir(subject_type_path) if os.path.isfile(os.path.join(subject_type_path, f))]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            cache_key = f"{subject}_{type}"
            file_cache[cache_key] = files
            pagination_cache[cache_key] = files  # –î–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            total_pages = (len(files) + information_data.FILES_PER_PAGE - 1) // information_data.FILES_PER_PAGE

            keyboard = create_files_keyboard(files, subject, type, page)
            text = get_page_text(files, subject_name, type_name, page, total_pages)

            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=text,
                parse_mode='Markdown',
                reply_markup=keyboard
            )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ show_other_files: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('page_'))
    def handle_page_navigation(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü"""
        data = call.data.split('_')
        subject = data[1]
        type = data[2]
        page = int(data[3])

        subject_name = information_data.subjects_others[subject]
        type_name = information_data.file_types_others[type]

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫—ç—à–∞
        cache_key = f"{subject}_{type}"
        if cache_key not in pagination_cache:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
            return

        files = pagination_cache[cache_key]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total_pages = (len(files) + information_data.FILES_PER_PAGE - 1) // information_data.FILES_PER_PAGE
        if page < 0 or page >= total_pages:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
            return

        keyboard = create_files_keyboard(files, subject, type, page)
        text = get_page_text(files, subject_name, type_name, page, total_pages)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            parse_mode='Markdown',
            reply_markup=keyboard
        )


    @bot.callback_query_handler(func=lambda call: call.data.startswith('oth_f_'))
    def send_other_file(call):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ other_files"""
        data = call.data.split('_')
        subject_key = data[2]
        type_key = data[3]
        file_index = int(data[4])

        cache_key = f"{subject_key}_{type_key}"
        if cache_key not in file_cache:
            bot.answer_callback_query(call.id, "‚ùå –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏")
            return

        files = file_cache[cache_key]
        if file_index < 0 or file_index >= len(files):
            bot.answer_callback_query(call.id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        filename = files[file_index]
        file_path = os.path.join(information_data.file_path_others, subject_key, type_key, filename)

        try:
            with open(file_path, 'rb') as file:
                bot.send_document(call.message.chat.id, file)
            bot.answer_callback_query(call.id, "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üìÑ")
        except:
            bot.answer_callback_query(call.id, "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    @bot.callback_query_handler(func=lambda call: call.data == 'back_to_allfiles_menu')
    def back_to_allfiles_menu(call):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é allfiles"""
        all_mes(call.message)

    @bot.callback_query_handler(func=lambda call: call.data == 'find_by_subject')
    def back_to_find_subject(call):
        """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞"""
        find_by_subject(call)

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    @bot.callback_query_handler(func=lambda call: call.data == 'look_all_files')
    def look_all_files(call):
        files_found = False
        keyboard = types.InlineKeyboardMarkup()
        files = []
        for subject_key, subject_name in information_data.subjects_others.items():
            for typefolder in information_data.in_others_key:
                folder_path = os.path.join(information_data.file_path_others, subject_key, typefolder)
                # print(folder_path)
                if not os.path.exists(folder_path):
                    continue
                try:
                    files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
                except PermissionError:
                    continue

                if not files:
                    continue

                files_found = True
                for file in files:
                    # print(file)
                    keyboard.add(types.InlineKeyboardButton(text=f'{file}',
                                                            callback_data=f'others_'))  # –ù—É–∂–Ω–æ –ø—Ä–æ–¥—É–º–∞—Ç—å callback_data –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ä–∞–±–æ—Ç—ã —Å –¥–∑
        if not files_found:
            bot.send_message(call.message.chat.id, "üìÇ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        bot.send_message(call.message.chat.id, text='–í–æ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º—É —Ä–∞–Ω–µ–µ.',
                         parse_mode='MARKDOWN', reply_markup=keyboard)
